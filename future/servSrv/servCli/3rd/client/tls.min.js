// v5.04.1 on 2019-04-06T22:45:30.614Z
'use strict';
const tls = require('tls'), url = require('url'), utils = require('../utils'), Client = require('../client'), ClientTls = function(options) {
 if ('string' == typeof options && (options = url.parse(options)), !(this instanceof ClientTls)) {
  return new ClientTls(options);
 }
 Client.call(this, options);
 const defaults = utils.merge(this.options, {
  encoding: 'utf8'
 });
 this.options = utils.merge(defaults, options || {});
};
require('util').inherits(ClientTls, Client), module.exports = ClientTls, ClientTls.prototype._request = function(request, callback) {
 const self = this, options = utils.merge({}, this.options);
 utils.JSON.stringify(request, options, function(err, body) {
  if (err) {
   return callback(err);
  }
  let handled = !1;
  const conn = tls.connect(options, function() {
   conn.setEncoding(options.encoding), utils.Request.isNotification(request) ? (handled = !0, 
   conn.end(body + '\n'), callback()) : (utils.parseStream(conn, options, function(err, response) {
    if (handled = !0, conn.end(), err) {
     return callback(err);
    }
    callback(null, response);
   }), conn.write(body + '\n'));
  });
  conn.on('error', function(err) {
   self.emit('tcp error', err), callback(err);
  }), conn.on('end', function() {
   handled || callback();
  });
 });
};
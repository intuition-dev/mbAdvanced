{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is mbake? mbake is a modern CLI static app generation tool. Apps and sites you generate with mbake are extreme serverless, allow user authentication and work with JSON and database APIs for dynamic databinding. You can use mbake for simple blogs or sites to the most complex web and mobile app projects. If you don't have time, see tl;dr at the bottom of this page. mbake compares to other static generators and grunt/gulp; but it does a lot more with a lot less coding. mbake is part of the MetaBake\u2122 approach but can be used by itself. What is MetaBake? MetaBake\u2122 is a modern development approach that helps you deliver web apps 10X faster with less coding. MetaBake\u2122 has 10 pillars. Find out more about MetaBake: Quick Demo Meetup Video Slide Deck Summary for Managers MetaBake allows for gradual adoption. You can start by adopting just one or a few of its pillars. mbake is a good start. MetaBake and mbake are open source. The source code is available at github.com/MetaBake See Resources for related projects. How to install mbake From a command line such as PowerShell, type: $ yarn global add mbake That's it! If you don't have Yarn installed, first go here . How to create a Hello World app with mbake ## Create index.pug header body p Hello #{key1} ## Create dat.yaml key1: World ## Generate index.html from Pug and Yaml: mbake . or: mbake subfoldername Auto-build/generate: if you are using a MetaBake META build server (see META doc), you don't even have to do the 'mbake .'. META has a watcher that triggers 'mbake' when you save a file. How to run an mbake app (such as Hello World) mbake apps run on any static web server. This includes low-cost cloud hosting such as Amazon S3. We show how to work with S3 later in this doc. When you develop locally, you could use 'Web Server for Chrome' to run mbake apps. To install it, open your Google Chrome web browser and install the 'Web Server for Chrome' app from here . Launch the app, click the 'Choose Folder' button and select the root folder of your app (e.g. where index.html of your Hello World app is). Also ensure 'Options' has 'Automatically show index.html' checked. Ensure the Web Server is STARTED, then navigate to the proposed URL (e.g. http://127.0.0.1:8887). Even though mbake apps are installed on a static server, they are dynamic because they allow user authentication and work with JSON for dynamic rendering and database APIs for dynamic databinding. How to generate a sample app with mbake ## Run mbake help to see the list of current sample apps mbake ## Generate sample app, e.g. mbake -v ## Navigate to it, e.g. cd crud Other popular mbake commands mbake -c . - Convert Pug/Riot files to useable comp/js, e.g.: data binding. mbake -i . - Convert dat.yaml static files to JSON, for dynamic binding. More about this in B-M-SPA docs. How to see all mbake options $ mbake How to make mbake apps serverless To go extreme serverless, we show how to use mbake with Amazon Web Services (AWS) S3 HTTP hosting Mounting software so you can mount AWS S3 as a drive Google Firebase/Firestore Go extreme serverless following the steps (Tutorials): Setup S3 as your HTTP server and mount it Mount S3 to linux box via goofys using CodeAnywhere editor Learn Pug and static binding; view via S3 HTTP server Spectre SCSS Theme Framework and SCSS dynamic databinding Generate a serverless CRUD webapp Simple CRUD example app and ViewModel+Bind Design Blog When done, you should see this . Serverless/Cloud V2, Mount and Pug are some of the pillars of MetaBake. tl;dr $ yarn global add mbake $ mbake $ mbake -v $ cd ModelView $ mbake . NEXT: Go to Setup S3 as your HTTP server and mount it .","title":"Home"},{"location":"#what-is-mbake","text":"mbake is a modern CLI static app generation tool. Apps and sites you generate with mbake are extreme serverless, allow user authentication and work with JSON and database APIs for dynamic databinding. You can use mbake for simple blogs or sites to the most complex web and mobile app projects. If you don't have time, see tl;dr at the bottom of this page. mbake compares to other static generators and grunt/gulp; but it does a lot more with a lot less coding. mbake is part of the MetaBake\u2122 approach but can be used by itself.","title":"What is mbake?"},{"location":"#what-is-metabake","text":"MetaBake\u2122 is a modern development approach that helps you deliver web apps 10X faster with less coding. MetaBake\u2122 has 10 pillars. Find out more about MetaBake: Quick Demo Meetup Video Slide Deck Summary for Managers MetaBake allows for gradual adoption. You can start by adopting just one or a few of its pillars. mbake is a good start. MetaBake and mbake are open source. The source code is available at github.com/MetaBake See Resources for related projects.","title":"What is MetaBake?"},{"location":"#how-to-install-mbake","text":"From a command line such as PowerShell, type: $ yarn global add mbake That's it! If you don't have Yarn installed, first go here .","title":"How to install mbake"},{"location":"#how-to-create-a-hello-world-app-with-mbake","text":"## Create index.pug header body p Hello #{key1} ## Create dat.yaml key1: World ## Generate index.html from Pug and Yaml: mbake . or: mbake subfoldername Auto-build/generate: if you are using a MetaBake META build server (see META doc), you don't even have to do the 'mbake .'. META has a watcher that triggers 'mbake' when you save a file.","title":"How to create a Hello World app with mbake"},{"location":"#how-to-run-an-mbake-app-such-as-hello-world","text":"mbake apps run on any static web server. This includes low-cost cloud hosting such as Amazon S3. We show how to work with S3 later in this doc. When you develop locally, you could use 'Web Server for Chrome' to run mbake apps. To install it, open your Google Chrome web browser and install the 'Web Server for Chrome' app from here . Launch the app, click the 'Choose Folder' button and select the root folder of your app (e.g. where index.html of your Hello World app is). Also ensure 'Options' has 'Automatically show index.html' checked. Ensure the Web Server is STARTED, then navigate to the proposed URL (e.g. http://127.0.0.1:8887). Even though mbake apps are installed on a static server, they are dynamic because they allow user authentication and work with JSON for dynamic rendering and database APIs for dynamic databinding.","title":"How to run an mbake app (such as Hello World)"},{"location":"#how-to-generate-a-sample-app-with-mbake","text":"## Run mbake help to see the list of current sample apps mbake ## Generate sample app, e.g. mbake -v ## Navigate to it, e.g. cd crud","title":"How to generate a sample app with mbake"},{"location":"#other-popular-mbake-commands","text":"mbake -c . - Convert Pug/Riot files to useable comp/js, e.g.: data binding. mbake -i . - Convert dat.yaml static files to JSON, for dynamic binding. More about this in B-M-SPA docs.","title":"Other popular mbake commands"},{"location":"#how-to-see-all-mbake-options","text":"$ mbake","title":"How to see all mbake options"},{"location":"#how-to-make-mbake-apps-serverless","text":"To go extreme serverless, we show how to use mbake with Amazon Web Services (AWS) S3 HTTP hosting Mounting software so you can mount AWS S3 as a drive Google Firebase/Firestore","title":"How to make mbake apps serverless"},{"location":"#go-extreme-serverless-following-the-steps-tutorials","text":"Setup S3 as your HTTP server and mount it Mount S3 to linux box via goofys using CodeAnywhere editor Learn Pug and static binding; view via S3 HTTP server Spectre SCSS Theme Framework and SCSS dynamic databinding Generate a serverless CRUD webapp Simple CRUD example app and ViewModel+Bind Design Blog When done, you should see this . Serverless/Cloud V2, Mount and Pug are some of the pillars of MetaBake.","title":"Go extreme serverless following the steps (Tutorials):"},{"location":"#tldr","text":"$ yarn global add mbake $ mbake $ mbake -v $ cd ModelView $ mbake . NEXT: Go to Setup S3 as your HTTP server and mount it .","title":"tl;dr"},{"location":"about/","text":"Click for 'THE' mbake Docs low-code = 10X faster web app development. With MetaBake's modern development approach, it is not about replacing your tech stack with another tech stack -- it is about eliminating it! About MetaBake mBake.org is a development productivity suite. It should allow you to deliver 10 times faster then legacy development stacks/methodologies. We have found that - with mBake.org; - the work of 6 developers over 6 months can be done by 3 developers in 3 weeks. We expect you to achieve the same productivity gains. How does open source MetaBake deliver 10X faster and cheaper web app development? Not enough organizations are fully leveraging the new Serverless. With Serverless services like Firestore and S3 you get rid of ALL server-side and middleware development and operations. This is where up to 2/3 of your time and cost used to go. Gone! On the client side (browser apps and mobile apps) MetaBake does something similar: it eliminates much of the tech stack and reduces the amount of coding and complexity. How? In school textbooks you learned about 1st generation languages, 2nd generation languages and our current 3rd generation languages, such as JavaScript, PHP and Ruby. With each new generation we achieved huge productivity improvements. We consider 'Pug'--also used by Node/Express--a 4th generation language that helps gain an equally big jump in productivity. With MetaBake we show you how to build complete applications in Pug. With this low-code approach we demonstrate much faster and cheaper web app and mobile app development. The MetaBake approach has 10 pillars that are the foundation for achieving mind-blowing development productivity gains. I'll just mention one more pillar here: automatic programming. You've probably heard of 'static site generators' like Hugo or Jekyll that people use to generate their web site or a blog. Automatic programming means using a similar generator to write your web app! This can get you to yet another level of productivity. To learn more about the MetaBake approach, including all 10 pillars and full examples, go to mBake.org. Or, to dive in right away, use the 'mbake CLI' from github.com/MetaBake as the first step into 10X faster web app development. mBake.org productivity is based on three modules: mbake, a static site generation tool that runs locally B-M-SPA, curated technologies and techniques that help you build dynamic apps and mobile apps faster Meta, a bespoke cloud-based build and admin app infrastructure that helps deliver functionality to your clients more quickly We benchmark against LAMP , RAILS , MEAN and such For example, LAMP is the technology WordPress was built on. Every 10 years or so technology gets 10 times better, which forces everyone to upgrade. Assembly was 10 times better than machine language. C/.js is 10 times better than Assembly. We believe that we found the answer on how to have a more productive team. So far, somehow, server-side rendered LAMP has dominated web deployments, with WordPress having some 30% of the World Wide Web. It is time to start displacing that. You can reinvest the time saved by using MetaBake into a more interactive user experience (UX). Better UX is proven to lead into higher user engagement and better user retention. About mbake mbake leverages the clarity, simplicity and productivity gained by using the declarative markup language Pug . We think of Pug as 4GL. mbake currently compiles Pug, Markdown and Yaml to generate HTML and JSON. Using the power of JavaScript, more transformers can be added. mbake runs as a small node process, either on your machine or in the cloud. mbake generates static sites, but it also supports making those sites dynamic with API calls and data feeds such as from JSON. mbake helps is another example of a http://staticgen.com webapp. mbake includes sample starters apps for CRUD. After you are comfortable with mbake, check out B-M-SPA and Meta. Prerequisites: you should know HTML and CSS. If you need to catch up, we recommend 'Design and Build Websites' by Jon Duckett. You will also learn Pug, to get started on Pug, watch Pug on Youtube Best way to get started with mbake is to read the Docs, linked at he top of the page.","title":"About"},{"location":"about/#low-code-10x-faster-web-app-development","text":"","title":"low-code = 10X faster web app development."},{"location":"about/#with-metabakes-modern-development-approach-it-is-not-about-replacing-your-tech-stack-with-another-tech-stack-it-is-about-eliminating-it","text":"","title":"With MetaBake's modern development approach, it is not about replacing your tech stack with another tech stack -- it is about eliminating it!"},{"location":"about/#about-metabake","text":"mBake.org is a development productivity suite. It should allow you to deliver 10 times faster then legacy development stacks/methodologies. We have found that - with mBake.org; - the work of 6 developers over 6 months can be done by 3 developers in 3 weeks. We expect you to achieve the same productivity gains. How does open source MetaBake deliver 10X faster and cheaper web app development? Not enough organizations are fully leveraging the new Serverless. With Serverless services like Firestore and S3 you get rid of ALL server-side and middleware development and operations. This is where up to 2/3 of your time and cost used to go. Gone! On the client side (browser apps and mobile apps) MetaBake does something similar: it eliminates much of the tech stack and reduces the amount of coding and complexity. How? In school textbooks you learned about 1st generation languages, 2nd generation languages and our current 3rd generation languages, such as JavaScript, PHP and Ruby. With each new generation we achieved huge productivity improvements. We consider 'Pug'--also used by Node/Express--a 4th generation language that helps gain an equally big jump in productivity. With MetaBake we show you how to build complete applications in Pug. With this low-code approach we demonstrate much faster and cheaper web app and mobile app development. The MetaBake approach has 10 pillars that are the foundation for achieving mind-blowing development productivity gains. I'll just mention one more pillar here: automatic programming. You've probably heard of 'static site generators' like Hugo or Jekyll that people use to generate their web site or a blog. Automatic programming means using a similar generator to write your web app! This can get you to yet another level of productivity. To learn more about the MetaBake approach, including all 10 pillars and full examples, go to mBake.org. Or, to dive in right away, use the 'mbake CLI' from github.com/MetaBake as the first step into 10X faster web app development.","title":"About MetaBake"},{"location":"about/#mbakeorg-productivity-is-based-on-three-modules","text":"mbake, a static site generation tool that runs locally B-M-SPA, curated technologies and techniques that help you build dynamic apps and mobile apps faster Meta, a bespoke cloud-based build and admin app infrastructure that helps deliver functionality to your clients more quickly We benchmark against LAMP , RAILS , MEAN and such For example, LAMP is the technology WordPress was built on. Every 10 years or so technology gets 10 times better, which forces everyone to upgrade. Assembly was 10 times better than machine language. C/.js is 10 times better than Assembly. We believe that we found the answer on how to have a more productive team. So far, somehow, server-side rendered LAMP has dominated web deployments, with WordPress having some 30% of the World Wide Web. It is time to start displacing that. You can reinvest the time saved by using MetaBake into a more interactive user experience (UX). Better UX is proven to lead into higher user engagement and better user retention.","title":"mBake.org productivity is based on three modules:"},{"location":"about/#about-mbake","text":"mbake leverages the clarity, simplicity and productivity gained by using the declarative markup language Pug . We think of Pug as 4GL. mbake currently compiles Pug, Markdown and Yaml to generate HTML and JSON. Using the power of JavaScript, more transformers can be added. mbake runs as a small node process, either on your machine or in the cloud. mbake generates static sites, but it also supports making those sites dynamic with API calls and data feeds such as from JSON. mbake helps is another example of a http://staticgen.com webapp. mbake includes sample starters apps for CRUD. After you are comfortable with mbake, check out B-M-SPA and Meta. Prerequisites: you should know HTML and CSS. If you need to catch up, we recommend 'Design and Build Websites' by Jon Duckett. You will also learn Pug, to get started on Pug, watch Pug on Youtube Best way to get started with mbake is to read the Docs, linked at he top of the page.","title":"About mbake"},{"location":"amp/","text":"AMP The Accelerated Mobile Pages (AMP) \u2014 is an open-source library that provides a straightforward way to create web pages that are compelling, smooth, and load near instantaneously for users. Web pages and ads published in the AMP open-source format load near instantly, giving users a smooth, more engaging experience on mobile and desktop. When a standard webpage has an AMP counterpart, a link to the AMP page is placed in an HTML tag in the source code of the standard page. Because most AMP pages are easily discoverable by web crawlers, third parties such as search engines and other referring websites can choose to link to the AMP version of a webpage instead of the standard version. AMP HTML is entirely built on existing web technologies. It achieves reliable performance by restricting some parts of HTML, CSS and JavaScript. To make up for those limitations AMP HTML defines a set of custom elements for rich content beyond basic HTML. AMP page example Head To learn what's necessary to create a valid AMP HTML page inspect code in blog app ( $ mbake -b , downloaded in the previous tutorial ). Open file /layout/layout.pug , it is the layout for regular pages, here in head you can see the link to the AMP page: link(rel='amphtml', href='m.html') With this link and the link to regular page in amp-page head this pages are linked to each other, so search engines know that this page has an amp version. Then open /layout/layout-m.pug file, it is the layout for amp-pages. This line tells that this is an AMP page: html('\u26a1') Next lines in head . The charset definition must be the first child of the head tag: meta(charset='utf-8') The AMP runtime must be loaded as the second child of the head tag: script(async, src='https://cdn.ampproject.org/v0.js') then goes a canonical link pointing to the regular HTML, as well required for an AMP page. (If no HTML version exists, it should point to itself): link(rel='canonical', href='index.html') AMP page require a viewport declaration. It's recommended to include initial-scale=1: meta(name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no, minimal-ui, viewport-fit=cover\") CSS must be embedded inline. In mbake we use include feature for css, we define css in the separate file, but in the compiled html output css will still be inline: include ../shared/css.pug If you'll open file shared/css.pug you can see that styles wrapped in style(amp-custom=''). it is also required. As for css properties itself there are also some restrictions, for example in amp page version styles can't be used !important is will give a validation error, and the inline style sheet has to be a maximum size of 50 kilobytes, if more it will also give a validation error. Check for more rules on css for AMP pages here . AMP HTML documents must contain the following boilerplate in their head tag: style(amp-boilerplate=''). body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}} Body In body tag almost all regular html tags are supported except for certain tags, such as the img tag, are replaced with equivalent or slightly enhanced custom AMP HTML tags, eg: blog/blog/post-*/layout-single-m.pug : amp-img.img__inside(alt='...', src='who.jpg', width='300', height='300') AMP page validation You can test your AMP page on validation errors online here, type in the unput field the page that is needed to be validated (note that you need to enter url to your amp page, eg: http://example/about/m.html ): https://search.google.com/test/amp or you can validate amp page directly in browser by adding this string to the end of your page's url, eg: http://example/about/m.html#development=1 If you're validating page in browser, open browser's console and it will show you whether the page has validation errors or validation is successful. Or if you're validating amp page through search.google.com it will show you the results of validation under the input field on the same page. In the next tutorial you will learn about Components. NEXT: Go to Components .","title":"AMP"},{"location":"amp/#amp","text":"The Accelerated Mobile Pages (AMP) \u2014 is an open-source library that provides a straightforward way to create web pages that are compelling, smooth, and load near instantaneously for users. Web pages and ads published in the AMP open-source format load near instantly, giving users a smooth, more engaging experience on mobile and desktop. When a standard webpage has an AMP counterpart, a link to the AMP page is placed in an HTML tag in the source code of the standard page. Because most AMP pages are easily discoverable by web crawlers, third parties such as search engines and other referring websites can choose to link to the AMP version of a webpage instead of the standard version. AMP HTML is entirely built on existing web technologies. It achieves reliable performance by restricting some parts of HTML, CSS and JavaScript. To make up for those limitations AMP HTML defines a set of custom elements for rich content beyond basic HTML.","title":"AMP"},{"location":"amp/#amp-page-example","text":"","title":"AMP page example"},{"location":"amp/#head","text":"To learn what's necessary to create a valid AMP HTML page inspect code in blog app ( $ mbake -b , downloaded in the previous tutorial ). Open file /layout/layout.pug , it is the layout for regular pages, here in head you can see the link to the AMP page: link(rel='amphtml', href='m.html') With this link and the link to regular page in amp-page head this pages are linked to each other, so search engines know that this page has an amp version. Then open /layout/layout-m.pug file, it is the layout for amp-pages. This line tells that this is an AMP page: html('\u26a1') Next lines in head . The charset definition must be the first child of the head tag: meta(charset='utf-8') The AMP runtime must be loaded as the second child of the head tag: script(async, src='https://cdn.ampproject.org/v0.js') then goes a canonical link pointing to the regular HTML, as well required for an AMP page. (If no HTML version exists, it should point to itself): link(rel='canonical', href='index.html') AMP page require a viewport declaration. It's recommended to include initial-scale=1: meta(name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no, minimal-ui, viewport-fit=cover\") CSS must be embedded inline. In mbake we use include feature for css, we define css in the separate file, but in the compiled html output css will still be inline: include ../shared/css.pug If you'll open file shared/css.pug you can see that styles wrapped in style(amp-custom=''). it is also required. As for css properties itself there are also some restrictions, for example in amp page version styles can't be used !important is will give a validation error, and the inline style sheet has to be a maximum size of 50 kilobytes, if more it will also give a validation error. Check for more rules on css for AMP pages here . AMP HTML documents must contain the following boilerplate in their head tag: style(amp-boilerplate=''). body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}","title":"Head"},{"location":"amp/#body","text":"In body tag almost all regular html tags are supported except for certain tags, such as the img tag, are replaced with equivalent or slightly enhanced custom AMP HTML tags, eg: blog/blog/post-*/layout-single-m.pug : amp-img.img__inside(alt='...', src='who.jpg', width='300', height='300')","title":"Body"},{"location":"amp/#amp-page-validation","text":"You can test your AMP page on validation errors online here, type in the unput field the page that is needed to be validated (note that you need to enter url to your amp page, eg: http://example/about/m.html ): https://search.google.com/test/amp or you can validate amp page directly in browser by adding this string to the end of your page's url, eg: http://example/about/m.html#development=1 If you're validating page in browser, open browser's console and it will show you whether the page has validation errors or validation is successful. Or if you're validating amp page through search.google.com it will show you the results of validation under the input field on the same page. In the next tutorial you will learn about Components. NEXT: Go to Components .","title":"AMP page validation"},{"location":"cms/","text":"Editor CMS In the next tutorial you will learn about Electron SPA. NEXT: Go to Electron SPA .","title":"CMS"},{"location":"cms/#editor-cms","text":"In the next tutorial you will learn about Electron SPA. NEXT: Go to Electron SPA .","title":"Editor CMS"},{"location":"electron/","text":"Electron SPA In the next tutorial you will learn about Meta Cake. NEXT: Go to Meta Cake .","title":"Electron SPA"},{"location":"electron/#electron-spa","text":"In the next tutorial you will learn about Meta Cake. NEXT: Go to Meta Cake .","title":"Electron SPA"},{"location":"meta-cake/","text":"Meta Cake Meta Cake is a library of plugins or components","title":"Meta Cake"},{"location":"meta-cake/#meta-cake","text":"Meta Cake is a library of plugins or components","title":"Meta Cake"},{"location":"res/","text":"Awesome low-code list of MetaBake resources https://github.com/metabake/MetaBake-Docs/tree/master/awesomeReference","title":"Resources"},{"location":"res/#awesome-low-code-list-of-metabake-resources","text":"https://github.com/metabake/MetaBake-Docs/tree/master/awesomeReference","title":"Awesome low-code list of MetaBake resources"},{"location":"seo/","text":"Social SEO SEO stands for Search Engine Optimization. Including social media metadata in all new pieces of content allows you to optimize for sharing Twitter, Facebook, Google+ and Pinerest by defining exactly how titles, descriptions, images and more appear in social streams. The implications for SEO are also significant. The right data, including optimized images, helps content to spread, which often leads to increased links and mentions. You can find many templates of SEO meta tags in the internet (eg: here ) In mbake you can write values for each meta tag and for each page in the page's dat.yaml file and then in the layout address to these fields in meta tags. This allows you to define meta tags just once (in the layout) amd then access to them on each page from dat.yaml file. You can inspect code in the example blog app: $ mbake -b compile files and run the app: $ mbakeW -c . $ cd blog $ mbake -i . $ cd ../assets $ mbakeW -s . $ mbakeW -w . in the /layout/layout.pug file you can see defined SEO meta tags in head : meta(name='description', content=content_text) //- Schema.org markup for Google+ meta(itemprop='name', content=title) meta(itemprop='description', content=content_text) meta(itemprop='image', content=image) //- Twitter Card data meta(name='twitter:title', content=title) meta(name='twitter:description', content=content_text) meta(name='twitter:image', content=image) //- Open Graph data meta(property='og:title', content=title) meta(property='og:image', content=image) meta(property='og:description', content=comment) Notice that instead of their value (text or url) there are variables. Now open /blog/post-*/dat.yaml , here you can see that the variables from the layout's head are defined here with their value as text or url, eg: title: >- Quisque faucibus lacinia turpis id fermentum. Sed eu velit massa. Etiam molestie, ante at imperdiet ornare, sapien nulla volutpat nunc. image: >- https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRbAOd1CI4oPfTryZpo_rAyZXf9ltuPAvRv45XPGDghPSLii5We content_text: >- Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod The values of this variables will be placed in html head SEO meta tags at the compiled time, in html when you will compile index.pug to index.html In the next tutorial you will learn about AMP. NEXT: Go to AMP .","title":"Social SEO"},{"location":"seo/#social-seo","text":"SEO stands for Search Engine Optimization. Including social media metadata in all new pieces of content allows you to optimize for sharing Twitter, Facebook, Google+ and Pinerest by defining exactly how titles, descriptions, images and more appear in social streams. The implications for SEO are also significant. The right data, including optimized images, helps content to spread, which often leads to increased links and mentions. You can find many templates of SEO meta tags in the internet (eg: here ) In mbake you can write values for each meta tag and for each page in the page's dat.yaml file and then in the layout address to these fields in meta tags. This allows you to define meta tags just once (in the layout) amd then access to them on each page from dat.yaml file. You can inspect code in the example blog app: $ mbake -b compile files and run the app: $ mbakeW -c . $ cd blog $ mbake -i . $ cd ../assets $ mbakeW -s . $ mbakeW -w . in the /layout/layout.pug file you can see defined SEO meta tags in head : meta(name='description', content=content_text) //- Schema.org markup for Google+ meta(itemprop='name', content=title) meta(itemprop='description', content=content_text) meta(itemprop='image', content=image) //- Twitter Card data meta(name='twitter:title', content=title) meta(name='twitter:description', content=content_text) meta(name='twitter:image', content=image) //- Open Graph data meta(property='og:title', content=title) meta(property='og:image', content=image) meta(property='og:description', content=comment) Notice that instead of their value (text or url) there are variables. Now open /blog/post-*/dat.yaml , here you can see that the variables from the layout's head are defined here with their value as text or url, eg: title: >- Quisque faucibus lacinia turpis id fermentum. Sed eu velit massa. Etiam molestie, ante at imperdiet ornare, sapien nulla volutpat nunc. image: >- https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRbAOd1CI4oPfTryZpo_rAyZXf9ltuPAvRv45XPGDghPSLii5We content_text: >- Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod The values of this variables will be placed in html head SEO meta tags at the compiled time, in html when you will compile index.pug to index.html In the next tutorial you will learn about AMP. NEXT: Go to AMP .","title":"Social SEO"},{"location":"tags/","text":"Components FlipTag In the next tutorial you will learn about CMS. NEXT: Go to Editor CMS .","title":"Components"},{"location":"tags/#components","text":"","title":"Components"},{"location":"tags/#fliptag","text":"In the next tutorial you will learn about CMS. NEXT: Go to Editor CMS .","title":"FlipTag"}]}